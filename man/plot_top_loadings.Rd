% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_top_loadings.R
\name{plot_top_loadings}
\alias{plot_top_loadings}
\alias{plot_top_loadings.recipe}
\alias{plot_top_loadings.workflow}
\title{Plot the largest PCA component loadings from a recipe or workflow}
\usage{
plot_top_loadings(x, ...)

\method{plot_top_loadings}{recipe}(x, ..., n = 4, id = NULL, type = "pca")

\method{plot_top_loadings}{workflow}(x, ..., n = 4, id = NULL, type = "pca")
}
\arguments{
\item{x}{A prepped recipe or fitted workflow that uses a recipe. The recipe
must have used at least one \code{\link[recipes:step_pca]{recipes::step_pca()}} (or \code{\link[recipes:step_pls]{recipes::step_pls()}}).}

\item{...}{An optional series of conditional statements used to filter the
PCA data before plotting. See Details below.}

\item{n}{The number of columns to plot (per component).}

\item{id}{A single numeric or character value that is used to pick the step
with the PCA results. If a single \code{\link[recipes:step_pca]{recipes::step_pca()}} (or
\code{\link[recipes:step_pls]{recipes::step_pls()}}) was used, this argument is ignored. \emph{Note}: if used,
\code{id} must be named.}

\item{type}{A character value ("pca" or "pls") for the type of step to use.}
}
\value{
A \code{ggplot} object.
}
\description{
A plot of the \code{n} largest component loadings is produced.
}
\examples{
library(recipes)
library(parsnip)
library(workflows)
library(ggplot2)

data("cells", package = "modeldata")

theme_set(theme_minimal())

## -----------------------------------------------------------------------------

cell_pca <-
  recipe(class ~ ., data = cells \%>\% dplyr::select(-case)) \%>\%
  step_center(all_predictors()) \%>\%
  step_scale(all_predictors()) \%>\%
  step_pca(all_predictors())

# or when used in a workflow
lr_workflow <-
  workflow() \%>\%
  add_model(logistic_reg() \%>\% set_engine("glm")) \%>\%
  add_recipe(cell_pca)

## -----------------------------------------------------------------------------

cell_pca <- prep(cell_pca)

# What were the top 10 channel 1 columns in the first two components?
plot_top_loadings(cell_pca, grepl("ch_1", terms) & component_number <= 2, n = 10)

## -----------------------------------------------------------------------------

lr_workflow <- lr_workflow \%>\% fit(data = cells)

plot_top_loadings(lr_workflow, component_number <= 4)

}
